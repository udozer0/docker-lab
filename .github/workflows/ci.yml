name: CI
on:
  push:
  pull_request:

permissions:
  contents: read

env:
  REGISTRY_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  # При PR из форка секреты недоступны: на PR будем только собирать, без push
  DO_PUSH: ${{ github.event_name != 'pull_request' }}

jobs:
  build_api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: ${{ env.DO_PUSH == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build (and push) API
        uses: docker/build-push-action@v6
        with:
          context: ./service-a
          file: ./service-a/Dockerfile
          push: ${{ env.DO_PUSH }}
          tags: |
            ${{ env.REGISTRY_USER }}/cpp-api:latest
            ${{ env.REGISTRY_USER }}/cpp-api:${{ github.sha }}
          provenance: false

  build_reporter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: ${{ env.DO_PUSH == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build (and push) Reporter
        uses: docker/build-push-action@v6
        with:
          context: ./service-b
          file: ./service-b/Dockerfile
          push: ${{ env.DO_PUSH }}
          tags: |
            ${{ env.REGISTRY_USER }}/cpp-reporter:latest
            ${{ env.REGISTRY_USER }}/cpp-reporter:${{ github.sha }}
          provenance: false

  e2e_compose_test:
    # ждём обе сборки; если одна упала, тест даже не стартует
    needs: [build_api, build_reporter]
    if: ${{ github.event_name != 'pull_request' }}   # тестируем образы из реестра только на push
    runs-on: ubuntu-latest
    steps:
      - uses: docker/setup-buildx-action@v3
      - name: Pull images
        run: |
          docker pull $REGISTRY_USER/cpp-api:latest
          docker pull $REGISTRY_USER/cpp-reporter:latest
      - name: Run compose on pushed images
        run: |
          cat > docker-compose.ci.yml <<'YAML'
          services:
            api:
              image: ${REGISTRY_USER}/cpp-api:latest
            reporter:
              image: ${REGISTRY_USER}/cpp-reporter:latest
              depends_on:
                api:
                  condition: service_started
          YAML
          REGISTRY_USER=${{ env.REGISTRY_USER }} docker compose -f docker-compose.ci.yml up --abort-on-container-exit --exit-code-from reporter
      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v --remove-orphans
